#читать это не обязательно, но если вам интересно моё мнение, то вот оно.!


#Пишу тесты ночью. в задании было ясно сказано, что они не обязательны, но стараюсь набрать баллов за старание.
#Заранее говорю, что тесты действительно не моё, и обычно я тестирую весь функционал у себя в голове, и представляю те или иные ошибки.
#Но тем ни менее спустя несколько попыток я настроил работу rspec с которым был знаком лишь однажды.
#понять его работу не так уж трудно, и при желании можно найти в сети все необходимые методы и сделать необходимый тест.
#так же я решил не затрагивать гемы типа Factory_girl, не нужная работа в рамках тестового задания которое вообще можно было сделать за час
#Если конечно не тупить по пол часа над чем-то определённым.
#Вообще Rails такой фрейм ворк в котором одну и ту же задачу можно решить приогромнейшим колличеством путей, и порой можно зациклиться на том пути,
#Которое заведомо неверно и потратить на этом лишние минуты. пожалуй я не буду зацикливатся на тестах, а сделаю сейчас кучу приколюшек, что-бы поднять уровень авантюризма проверяющего.

так же я решил потестить, какие директории в этом приложении бесполезны и поудалять их, раньше как-то не было возможности.

да, вы могли заметить, что изначально 2 таблицы с контроллерами, вьюхами и моделями были сгенерированы с помощью scaffold и позже отредактированы что-бы соответствовать условиям задачи, и не оставалось лишнего
так же хотел бы заметить, что вижу данные связи самыми простыми и без выпендрежа, хотя и можно было бы сократить колличество кода например с теми же должностями
с той же точки зрения интерфейса например выгружать на главную страницу таблицу должностей и сотрудников одновременно, с возможностью сортировки.
но в этом плане условия задачи были полностью соблюдены, т.к цитирую

"Каждый справочник состоит из:
    Страница списка, в котором можно просмотреть, добавить, удалить, изменить сущность. #(2 crud элемента)
    Страница просмотра отдельной сущности. #(show и должности и сотрудника)
    Страница редактирования сущности.       #(edit и должности и сотрудника)
"

резюмирую, какие условия - такой результат.

по поводу валидаций, а, да.. сам написал. я бы мог не заморачиваться, и сделать просто одну строку ":name",и работать было бы проще, но тогда пришлось бы сделать проверку на грамматику и прочее.
вот я и решил пойти по пути 3 отдельные строки. зато функционала больше, если делать поиск, то можно его сделать отдельно по фамилиям или именам, хотя это и труднее.
можно было бы сделать ещё одну строку ":full_name" которая бы после сохранения записывала в себя содержимое метода с тем же названием. и работать уже с ней, но я посчитал это кощунстовм хранить в базе 4 строки
first_name: андрей
last_name: зубин
patronymic_name: алексеевич
full_name: Зубин Андрей Алексеевич

ну бред же.

так же мог бы прикрутить часовые пояса, выгрузить это дело на тестовый сервер(Digital ocean например) и запустить на связке passenger+nginx.

в первую же очередь, я почти не добавлял сторонних библиотек, и хотел показать именно стоковый rails.  хотя, мог бы добавить много чего ещё:
devise, simple form, paperclip, imagemagic, dragonfly, haml, omniauth, aws-sdk, activeadmin, aasm...
из добавленных у меня только:
rspec и will_paginate





вообще я резюмирую, что это тестовое задание не может показать весь список моих умений, я ноутбук на собеседовании доставал, что-бы показать примеры своего кода, где есть очень много чего интересного:
сторонние API, пользователи с шифруемыми паролями, интересные решения для поиска, использование activeadmin. так же телеграмм боты.
и мне стыдно, что теоретическая база начинает страдать после перенасыщения работой, я думаю это не только мой бич.!
